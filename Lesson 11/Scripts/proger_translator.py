# Переводчик с языка программистов на русский
# Демонстрирует использование словарей

proger_dict = {
    "Бага" : "Ошибка, не нормальное поведение программы",
    "Батон" : "Клавиша на клавиатуре. От английского button - кнопка. Отсюда выражение 'Давить батоны'. См. также 'Клава'",
    "Бук" : "Ноутбук, ноут",
    "Ноут" : "Бук, ноутбук",
    "Комп" : "Компьютер",
    "Дрова" : "То же самое, что и драйвер",
    "Глюка" : "Нехарактерное поведение программного обеспечения или оборудования компьютера. Возможно вызывается багой, но может определяться программистом и как фича",
    "Клава" : "Клавиатура. 'Топтать клаву' - быстро набирать какой-либо текст на клавиатуре",
    "Патч" : "Дополнение или обновление программы, которое исправляет ее ошибки, баги, глюки. От английского patch - пластырь, заплатка",
    "Фича" : "Какая-то необычная/новая возможность в программе, которой гордится программист. От английского feature",
    "Мать" : "Сокращение от 'Материнская плата'. Основное устройство компьютера, в которое подключаются другие устройства: процессор, память, платы, диск и т.д.",
    "Костыль" : "Быстрое исправление серьезных багов, дыр, ошибок в какой-то части программы без должного системного решения",
    "Прога" : "Сокращение от слова 'программа'",
    "Кило" : "Килобайт. Ответ на вопрос 'Сколько весит?' - 'Два кило' означает, что размер данных составляет 2 килобайта",
    "Метр" : "Один мегабайт",
    "Гектар" : "Один гигабайт",
    "Железо" : "Процессор, материнская, звуковая и прочие платы. Комплектующие для компьютера.",
    "Софт" : "Программное обеспечение, программы",
    "Фикс" : "Исправление ошибки в программе. То же самое, что и патч",
    "Морда" : "Внешний вид пользовательского интерфейса программы. То же самое, что и GUI (Graphic User Interface). Используется также в словосочетании 'веб морда'",
    "Релиз" : "Окончательная версия программы, которая прошла все виды тестов и готова к выпуску для конечных юзеров",
    "Юзер" : "Конечный пользователь программы. От английского User",
    "Юзать" : "Пользоваться. От английского Use",
    "Юзабельный" : "Удобный в пользовании, годный",
    "Тулза" : "Утилита. От английского tools. Сравнительно небольшая программная система, которая предназначена, в основном, для обеспечения функционирования более сложных систем",
    "Эникей" : "В переводе с английского Any key - любая клавиша. Зря некоторые думают, что это Reset...",
    "Клик" : "Нажатие кнопки мыши; от английского click - щелчек. Кликнуть означать нажать на кнопку мыши, кликнуть 2 раза - двойной щелчек мышью",
    "Копипаста" : "От английкого copy/paste - скопировать и вставить. Очень плохой подход в программировании, когда один и тот же код расползается по разным модулям",
    "Бета" : "Пробная версия программы, выдаваемая для тестирования пользователям. То же самое что бета-версия",
    "Бета-тестер" : "Тот, на ком испытывают новую версию программы для того, чтобы выявить ошибки и узнать мнение пользователя",
    "Пилить" : "Старательно разрабатывать программу",
   }


def find_term(p_dict):
    """(dict {str:str}) -> NoneType

    Запрашивает термин у пользователя, ищет его в словаре p_dict и выводит расшифровку термина
    """
    term = input("Какой термин вы хотите перевести?: ")
    if term in p_dict:
        definition = p_dict[term]
        print(term, "означает", definition)
    else:
        print("Увы, термин '" + term + "' отсутствует в словаре")


def add_term(p_dict):
    """(dict {str:str}) -> NoneType

    Добавляет термин, введенный пользователем, в словарь p_dict
    """
    term = input("Какой термин вы хотите добавить?: ")
    if term not in p_dict:
        definition = input("Укажите толкование термина: ")
        p_dict[term] = definition
        print("Термин '" + term + "' добавлен в словарь.")
    else:
        print("Такой термин уже есть! Попробуйте изменить его толкование.")


def change_term(p_dict):
    """(dict {str:str}) -> NoneType

    Запрашивает термин у пользователя, ищет его в словаре p_dict и позволяет
    пользователю переопределить значение данного термина в словаре
    """
    term = input("Какой термин вы хотите переопределить?: ")
    if term in p_dict:
        print("Сейчас '" + term + "' обозначает", p_dict[term])
        definition = input("Впишите ваше толкование: ")
        p_dict[term] = definition
        print("Термин '" + term + "'переопределен.")
    else:
        print("Такого термина пока нет! Попробуйте добавить его в словарь.")


def delete_term(p_dict):
    """(dict {str:str}) -> NoneType

    Запрашивает термин у пользователя и удаляет его из словаря p_dict
    """
    term = input("Какой термин вы хотите удалить?: ")
    if term in p_dict:
        del p_dict[term]
        print("Термин '" + term + "' удален")
    else:
        print("Невозможно удалить термин '" + term + "' т.к. он отсутствует в словаре.")


def sort_and_display(p_dict):
    """(dict {str:str}) -> NoneType

    Сортирует словарь p_dict по значению ключа и выводит пары
    Ключ (термин) - Значение (расшифровка термина)
    """
    for term in sorted(p_dict.keys()):
        print(term, "означает", p_dict[term])


# здесь начинается основная программа
# инициализация констант для пунктов меню
EXIT, FIND, ADD, CHANGE, DELETE, SORT_N_DISPLAY = map(str, range(6))

choice = None
while choice != EXIT:

    print(
    """
    Переводчик с языка программистов на русский
    
    0 - Выйти
    1 - Найти толкование термина
    2 - Добавить термин
    3 - Изменить толкование термина
    4 - Удалить термин
    5 - Вывести весь словарь по алфавиту
    """
    )
    
    choice = input("Ваш выбор: ").strip()
    print()

    # выход
    if choice == EXIT:
        print("До свидания.")

    # поиск толкования
    elif choice == FIND:
        find_term(proger_dict)

    # добавление термина с толкованием
    elif choice == ADD:
        add_term(proger_dict)

    # новое толкование известного термина
    elif choice == CHANGE:
        change_term(proger_dict)
       
    # удаление термина вместе с его толкованием
    elif choice == DELETE:
        delete_term(proger_dict)

    # вывод всего словаря с сортировкой по значению ключа
    elif choice == SORT_N_DISPLAY:
        sort_and_display(proger_dict)
            
    # непонятный ввод пользователя
    else:
        print("Извините, в меню нет пункта", choice)
  
input("\n\nДля выхода нажмите Enter.")
