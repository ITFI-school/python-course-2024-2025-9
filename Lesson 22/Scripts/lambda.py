# Программа демонстрирует варианты использования lambda-функций

# Список химических элементов. Каждый элемент представлен в виде кортежа (<Группа>, <Порядковый номер>, <Название элемента>)
elements = [(2, 12, "Mg"), (1, 11, "Na"), (1, 3, "Li"), (2, 4, "Be")]
print("Начальное состояние:\n", elements)

# после сортировки по умолчанию получим [(1, 3, 'Li'), (1, 11, 'Na'), (2, 4, 'Be'), (2, 12, 'Mg')]

print("Сортируем по умолчанию (по 1-му элементу кортежа):\n", sorted(elements))
# сортировка по 2-му и 3-му полям каждого элемента списка с помощью lambda
print("Сортировка по 2-му и 3-му полям:\n", sorted(elements, key=lambda e: e[1:3]))
# сортировка по названию, без учета регистра символов, и порядковому номеру
elements.sort(key=lambda e: (e[2].lower(), e[1]))
print("Cортировка по названию, без учета регистра символов, и порядковому номеру:\n", elements)

# Ниже приводятся два эквивалентных способа создания функции,
# вычисляющей площадь прямоугольного треугольника по известной формуле
# 0.5 * <основание> * <высота>
area_lambda = lambda b, h: 0.5 * b * h

def area_common(base, height):
    return 0.5 * base * height

# Создание словарей со значениями по умолчанию. Ранее (занятие 12) говорилось, что при обращении 
# к такому словарю с несуществующим ключом будет создан соответствующий элемент с указанным ключом 
# и со значением по умолчанию, которое возвращает заданная функций.
# Ниже приводятся несколько примеров создания таких словарей с использованием lambda:
import collections

minus_one_dict = collections.defaultdict(lambda: -1)
point_zero_dict = collections.defaultdict(lambda: (0, 0))
message_dict = collections.defaultdict(lambda: "No message available")

input("\n\nДля выхода нажмите Enter.")
